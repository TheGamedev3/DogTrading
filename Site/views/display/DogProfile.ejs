<!DOCTYPE html>
<html>
<head>
  <title><%= dog.name || "Unnamed Dog" %> | Dog Profile</title>
</head>
<body style="font-family:sans-serif;margin:0;padding:0;">

  <%- include('../shared/Header') %>

  <main style="padding:2rem;max-width:600px;margin:auto;">


    <!-- Dog Name Edit Section -->
    <div style="display: flex; align-items: center; gap: 0.5rem;">
      <h1 id="dogName" style="margin: 0;"></h1>
      
      <div style="display: flex; flex-direction: column;">
        <input id="editDogName" type="text" value="" style="display: none; font-size: 2rem;" />
      </div>

      <button id="editNameBtn">Edit Dog's Name</button>
    </div>

    <!-- Profile Picture Section -->
    <div style="margin: 1rem 0; display: flex; flex-direction: column; gap: 0.75rem;">
      <!-- Image + Button Row -->
      <div style="display: flex; align-items: flex-start; gap: 1rem;">
        <!-- Profile Image -->
        <div>
          <img id="profilePicture" src="" alt="Dog profile picture"
              style="width: 300px; height: auto; border-radius: 8px; border: 1px solid #ccc;" />
          <p id="profileUnavailable"><em>No profile picture available.</em></p>
        </div>

        <!-- Edit Button aligned to top of image -->
        <div style="padding-top: 0.25rem;">
          <button id="editProfileBtn">Edit Profile Picture</button>
        </div>
      </div>

      <!-- URL Input below -->
      <div>
        <input id="editProfileURL" type="text" value=""
              style="display: none; width: 100%;" />
      </div>
    </div>

    <p><strong>Owner:</strong>
      <a id="ownerLink" href="" style="color: #3366cc;">
      </a>
    </p>

    <!-- ⚙️ Display Info logic -->
    <script>
      StaticState(({ DynamicEJSelements, session, refresh, request, useVar }) => {
        const [
          dogName, editDogName, editNameBtn,
          profilePicture, profileUnavailable, editProfileURL,
          editProfileBtn,
          ownerLink
        ] = DynamicEJSelements(
          "dogName", "editDogName", "editNameBtn",
          "profilePicture", "profileUnavailable", "editProfileURL",
          "editProfileBtn",
          "ownerLink"
        );

        let dog = session.dog;
        let ownedByViewer = session.userId && (dog.owner._id.toString() === session.userId.toString());
        
        ownerLink.set({text:dog.owner.name, href:`/UserProfile/${dog.owner._id}`});

        async function updateDog(){
          const[success2, result2]=await request(`GET /dog/${dog._id}`);
          if(!success2){throw result2}
          session.dog = result2;
          refresh();
        }

        /////////////////////////////////////////

        // (custom persisting var hook, whose value persists during refreshing)
        const editName = useVar(false);
        editNameBtn.set({text:"✏️", visible:!editName() && ownedByViewer});
        editNameBtn.onClick(()=>{
          editName(true);
          editDogName.set({value:dog.name, placeholderText:"Enter a name for the dog!", visible:editName()});
          if(editName()){editDogName.focusAll()}
          refresh();
        });

        dogName.set({text:dog.name, visible:!editName()});

        // 📝 onTextSubmit for name
        editDogName.onTextSubmit(async (value) => {
          editDogName.set({disabled:true});
          const newName = value.trim();

          let success = false; let result = null;

          if (newName === dog.name){success = true}
          else{
            const [s2, r2] = await request(`PATCH /editDog/${dog._id}`, { name: newName });
            success = s2; result = r2;
          }

          if(!success){
            // blank name error
            if(result && result.server.includes("`name` is required")){
              editDogName.displayError("name field can't be blank!");
            }
            // misc error
            else{
              editDogName.displayError("invalid name!");
            }
            editDogName.set({disabled:false});
            throw result;
          }else{
            editDogName.clearError();
          }
          editName(false);
          await updateDog();
          editDogName.set({visible:false, disabled:false});
        });

        editDogName.set({value:dog.name, placeholderText:"Enter a name!", visible:editName()});

        /////////////////////////////////////////

        const editPfp = useVar(false);
        editProfileBtn.set({text:"✏️", visible:!editPfp() && ownedByViewer});
        editProfileBtn.onClick(()=>{
          editPfp(true);
          editProfileURL.set({value:dog.profile, placeholderText:"Enter an img url!", visible:editPfp()});
          if(editPfp()){editProfileURL.focusAll()}
          refresh();
        });


        profilePicture.set({src:dog.profile, visible:dog.profile});
        profileUnavailable.set({text:'[image missing or unavailable]', visible:!dog.profile});

        // 🖼️ onTextSubmit for profile URL
        editProfileURL.onTextSubmit(async (value) => {
          const newURL = value.trim();
          profilePicture.set({src:newURL, visible:newURL});
          profileUnavailable.set({text:'[image missing or unavailable]', visible:!newURL});
          editProfileURL.set({disabled:true});
          
          const [success, result] = await request(`PATCH /editDog/${dog._id}`, { profile: newURL });
          if (!success) {editProfileURL.set({disabled:false}); throw result;}
          editPfp(false);
          await updateDog();
          editProfileURL.set({visible:false, disabled:false});
        });

        /////////////////////////////////////////
      });
    </script>
    
    <!-- 🐶 Dog Status -->
    <p>
      <strong>Status:</strong>
      <span id="DogStatus"></span>
    </p>

    <!-- 🚨 pretty error banner (initially hidden) -->
    <div id="ErrorFlag"
         style="display:none;margin-top:1rem;padding:.75rem;
                border:1px solid #dc3545;border-radius:4px;
                background:#f8d7da;color:#721c24;
                font-weight:600;"></div>

    <!-- 🤝 Trade Panel -->
    <div id="TradePanel"
         style="margin-top:2rem;background:#f9f9f9;padding:1rem;border:1px solid #ddd;">
      <p></p>
      <button id="BuyBtn" class="action-btn buy"></button>
    </div>

    <!-- 👤 MyDog Panel -->
    <div id="MyDog"
         style="margin-top:2rem;background:#eef;padding:1rem;border:1px solid #ccc;">
      <h2>This is one of your dogs!</h2>
      <p></p>
      <button id="Sell"         class="action-btn sell"      ></button>
      <button id="UnsellBtn"    class="action-btn unsell"    ></button>
      <button id="UnregisterBtn"class="action-btn unregister"></button>
    </div>

    <!-- ⚙️ Trade logic -->
    <script>
      StaticState(({ DynamicEJSelements, session, refresh, request }) => {
        const [
          DogStatus,
          ErrorFlag,
          TradePanel, BuyBtn,
          MyDog, Sell, UnsellBtn, UnregisterBtn
        ] = DynamicEJSelements(
          'DogStatus',
          'ErrorFlag',
          'TradePanel','BuyBtn',
          'MyDog','Sell','UnsellBtn','UnregisterBtn'
        );

        let dog = session.dog;
        let ownedByViewer = session.userId &&
                            (dog.owner._id.toString() === session.userId.toString());
        let hasOffer   = Boolean(dog.offer) && dog.offer.status === 'available';
        let isTraded   = !ownedByViewer && hasOffer;

        /* helper to (a) run an async handler and (b) surface errors nicely */
        async function run(action){
          ErrorFlag.set({visible:false});
          try{ await action(); }
          catch(e){
            const msg = (e?.message) ? e.message
                                     : (e?.server || 'Unknown error');
            ErrorFlag.set({text:msg, visible:true});
            console.error(e);
          }
        }

        /* refresh dog from server then redraw */
        async function updateDog(){
          const [ok,res] = await request(`GET /dog/${dog._id}`);
          if(!ok) throw res;
          session.dog = res;
          refresh();
        }

        /* ——— status label ——— */
        DogStatus.set({text: hasOffer ? 'Available' : 'Not For Sale'});

        /* ——— BUY ——— */
        TradePanel.set({visible:isTraded});
        BuyBtn.set({text:'Buy',disabled:false});
        BuyBtn.onClick(()=>run(async()=>{
          BuyBtn.set({text:'Purchasing…',disabled:true});
          const [ok,res] = await request(`POST /buyOffer/${dog.offer._id}`);
          if(!ok) throw res;
          await updateDog();
        }));

        /* ——— SELL / UNSELL / UNREGISTER (owner only) ——— */
        MyDog.set({visible:ownedByViewer});

        /* SELL */
        Sell.set({text:'Sell',visible:!hasOffer,disabled:false});
        Sell.onClick(()=>run(async()=>{
          Sell.set({text:'Selling…',disabled:true});
          const[ok,res]=await request(`POST /makeOffer/${dog._id}`);
          if(!ok) throw res;
          await updateDog();
        }));

        /* UNSELL */
        UnsellBtn.set({text:'Cancel Sale',visible:hasOffer,disabled:false});
        UnsellBtn.onClick(()=>run(async()=>{
          UnsellBtn.set({text:'Cancelling…',disabled:true});
          const[ok,res]=await request(`DELETE /deleteOffer/${dog.offer._id}`);
          if(!ok) throw res;
          await updateDog();
        }));

        /* UNREGISTER  */
        UnregisterBtn.set({text:'Unregister',visible:ownedByViewer,disabled:false});
        UnregisterBtn.onClick(()=>run(async()=>{
          if(!confirm('Permanently remove this dog?')) return;
          UnregisterBtn.set({text:'Removing…',disabled:true});
          const[ok,res]=await request(`DELETE /unregisterDog/${dog._id}`);
          if(!ok) throw res;
          /* after unregister go back to profile */
          window.location.href = `/UserProfile/${dog.owner._id}`;
        }));
      });
    </script>

  </main>
</body>
</html>
