<!DOCTYPE html>
<html>
<head>
  <title><%= dog.name || "Unnamed Dog" %> | Dog Profile</title>
</head>
<body style="font-family: sans-serif; margin: 0; padding: 0;">

    <%- include('../shared/Header') %>

    <main style="padding: 2rem; max-width: 600px; margin: auto;">

    <div style="display: flex; align-items: center; gap: 0.5rem;">
      <h1 id="dogName" style="margin: 0;"></h1>
      <input id="editDogName" type="text" value="" style="display: none; font-size: 2rem;" />
      <button id="editNameBtn">Edit Dog's Name</button>
    </div>

    <div style="margin: 1rem 0;">
      <img id="profilePicture" src="" alt="Dog profile picture" style="max-width: 100%; border-radius: 8px; border: 1px solid #ccc;" />
      <p id="profileUnavailable"><em>No profile picture available.</em></p>
      <input id="editProfileURL" type="text" value="" style="display: none; width: 100%;" />

      <div style="margin-top: 0.5rem;">
        <button id="editProfileBtn">Edit Profile Picture</button>
      </div>
    </div>

    <p><strong>Owner:</strong>
      <a id="ownerLink" href="" style="color: #3366cc;">
      </a>
    </p>

    <!-- ⚙️ Display Info logic -->
    <script>
      StaticState(({ DynamicEJSelements, session, refresh, request, onFirstRun }) => {
        const [
          dogName, editDogName, editNameBtn,
          profilePicture, profileUnavailable, editProfileURL,
          editProfileBtn,
          ownerLink
        ] = DynamicEJSelements(
          "dogName", "editDogName", "editNameBtn",
          "profilePicture", "profileUnavailable", "editProfileURL",
          "editProfileBtn",
          "ownerLink"
        );

        let dog = session.dog;
        let ownedByViewer = session.userId && (dog.owner._id.toString() === session.userId.toString());
        
        async function updateDog(){
          const[success2, result2]=await request(`GET /dog/${dog._id}`);
          if(!success2){throw result2}
          session.dog = result2;
          refresh();
        }

        /////////////////////////////////////////

        onFirstRun(()=>session.editName = false);
        let editName = session.editName;
        editNameBtn.set({text:"✏️", visible:!editName});
        editNameBtn.onClick(()=>{
          editName = true;
          session.editName = editName;
          editDogName.set({value:dog.name, placeholderText:"Enter a name for the dog!", visible:editName});
          if(editName){editDogName.focusAll()}
          refresh();
        });

        dogName.set({text:dog.name, visible:!editName});

        // 📝 onTextSubmit for name
        editDogName.onTextSubmit(async (value) => {
          const newName = value.trim();
          if (newName === dog.name) return;

          editDogName.set({disabled:true});
          const [success, result] = await request(`PATCH /editDog/${dog._id}`, { name: newName });
          if(!success){
            // blank name error
            if(result && result.server.includes("`name` is required")){
              editDogName.displayError("name field can't be blank!");
            }
            // misc error
            else{
              editDogName.displayError("invalid name!");
            }
            editDogName.set({disabled:false});
            throw result;
          }else{
            editDogName.clearError();
          }
          session.editName = false;
          await updateDog();
          editDogName.set({visible:false, disabled:false});
        });

        editDogName.set({value:dog.name, placeholderText:"Enter a name!", visible:editName});

        /////////////////////////////////////////

        onFirstRun(()=>session.editPfp = false);
        let editPfp = session.editPfp;
        editProfileBtn.set({text:"✏️", visible:!editPfp});
        editProfileBtn.onClick(()=>{
          editPfp = true;
          session.editPfp = editPfp;
          editProfileURL.set({value:dog.profile, placeholderText:"Enter an img url!", visible:editPfp});
          if(editPfp){editProfileURL.focusAll()}
          refresh();
        });


        profilePicture.set({src:dog.profile, visible:dog.profile});
        profileUnavailable.set({text:'[image missing or unavailable]', visible:!dog.profile});

        // 🖼️ onTextSubmit for profile URL
        editProfileURL.onTextSubmit(async (value) => {
          const newURL = value.trim();
          profilePicture.set({src:newURL, visible:newURL});
          profileUnavailable.set({text:'[image missing or unavailable]', visible:!newURL});
          editProfileURL.set({disabled:true});
          
          const [success, result] = await request(`PATCH /editDog/${dog._id}`, { profile: newURL });
          if (!success) {editProfileURL.set({disabled:false}); throw result;}
          session.editPfp = false;
          await updateDog();
          editProfileURL.set({visible:false, disabled:false});
        });

        /////////////////////////////////////////
      });
    </script>

    <!-- 🐶 Dog Status -->
    <p>
      <strong>Status:</strong>
      <span id="DogStatus"></span>
    </p>

    <!-- 🤝 Trade Panel -->
    <div id="TradePanel" style="margin-top: 2rem; background-color: #f9f9f9; padding: 1rem; border: 1px solid #ddd;">
      <p></p>
      <button id="BuyBtn" style="padding: 0.6rem 1.2rem; font-size: 1rem; background: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer;"></button>
    </div>

    <!-- 👤 MyDog Panel -->
    <div id="MyDog" style="margin-top: 2rem; background-color: #eef; padding: 1rem; border: 1px solid #ccc;">
      <h2>This is one of your dogs!</h2>
      <p></p>
      <button id="Sell" style="margin-right: 1rem;"></button>
      <button id="UnsellBtn"></button>
      <button id="UnregisterBtn"></button>
    </div>

    <!-- ⚙️ Trade logic -->
    <script>
      StaticState(({ DynamicEJSelements, session, refresh, request }) => {
        const [
          DogStatus,
          TradePanel, BuyBtn,
          MyDog, Sell, UnsellBtn
        ] = DynamicEJSelements(
          'DogStatus',
          'TradePanel', 'BuyBtn',
          'MyDog', 'Sell', 'UnsellBtn', 'UnregisterBtn'
        );

        let dog = session.dog;
        let ownedByViewer = session.userId && (dog.owner._id.toString() === session.userId.toString());
        let hasOffer = Boolean(dog.offer) && dog.offer.status === 'available';
        let isTraded = !ownedByViewer && hasOffer;
        
        async function updateDog(){
          const[success2, result2]=await request(`GET /dog/${dog._id}`);
          if(!success2){throw result2}
          session.dog = result2;
          refresh();
        }
        
        DogStatus.set({text: hasOffer ? 'Available' : 'Not For Sale'});

        /////////////////////////////////////////

        TradePanel.set({visible: isTraded});
        BuyBtn.set({text:"BUY BUY", background:'green', color:'white', enabled:true, defaultState:true});
        BuyBtn.onClick(async()=>{
          BuyBtn.set({text:"purchasing...", background:'blue', disabled:true});
          const[success, result]=await request(`POST /buyOffer/${dog.offer._id}`);
          if(!success){throw result}

          updateDog();
        });

        /////////////////////////////////////////

        MyDog.set({visible: ownedByViewer});

        Sell.set({text:"SELL SELL", background:'red', color:'white', enabled:true, defaultState:true});
        Sell.set({visible:!hasOffer});
        Sell.onClick(async()=>{
          Sell.set({text:"selling...", background:'brown', disabled:true});
          const[success, result]=await request(`POST /makeOffer/${dog._id}`);
          if(!success){throw result}
          await updateDog();
          Sell.set({text:"SELL SELL", background:'red', enabled:true});
        });

        UnsellBtn.set({text:"UNSELL", background:'green', color:'white', enabled:true, defaultState:true});
        UnsellBtn.set({visible:hasOffer});
        UnsellBtn.onClick(async()=>{
          UnsellBtn.set({text:"recollecting...", background:'black', disabled:true});
          const[success, result]=await request(`DELETE /deleteOffer/${dog.offer._id}`);
          if(!success){throw result}
          await updateDog();
          UnsellBtn.set({text:"UNSELL", background:'green', enabled:true});
        });

        /////////////////////////////////////////
      });
    </script>

  </main>

</body>
</html>
